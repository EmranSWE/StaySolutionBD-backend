// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  owner
  renter
  admin
  super_admin

}


enum PropertyStatus {
available
booked
underMaintenance
}

enum BookingStatus {
Confirmed
Pending
Cancelled
}


enum PaymentStatus {
Completed
Pending
Failed
}


enum PriorityLevel {
Low
Medium
High
}


enum IssueStatus {
  OPEN       
  IN_PROGRESS
  RESOLVED    
  CLOSED      
}


enum NotificationType {
Booking
Cancellation
Offers
}

enum NotificationPlatform {
Email
SMS
App
}

enum MessageCategory {
Inquiry
BookingRelated
IssueRelated
}

enum Category {
  Apartment
  Condominium
  Single_family_home
  Townhouse
  Studio
  Duplex
  Villa
  Cottage
}

model User {
  id      String      @id @default(uuid())
  firstName String 
  middleName String?
  lastName String
  email String @unique
  phone String
  profilePic String?
  role ROLE @default(renter)
  preferredPropertyType String?
  preferredAmenities String[]
  preferredLocation String?
  searchHistory String[]
  socialMediaLink String[]
  userStatus String[]
  address String?
  password String
  passwordChangedAt DateTime? @updatedAt
  createdAt DateTime @default(now())
  properties Property[]
  reviews Review[]
  bookings Booking[]
  payments Payment[]
  issues Issue[]
  wishlists WishList[]
  messageSent Message[]  @relation("MessageSent")
  messageReceived Message[]  @relation("MessageReceived")
  notifications Notification[]
  loyalties Loyalty[]
  marketplaces Marketplace[]
  insurances Insurance[]
  feedbacks Feedback[]
  monthlyRentPayments MonthlyRentPayment[]
  @@map("users")
}

model Property {
  id String @id @default(uuid())
  title String
  location String?
  city String[]
  numberOfRooms Int
  monthlyRent Int?
  flatNo String?
  description String?
  amenities String[]
  rules String[]
  availableDate DateTime? @updatedAt
  imageGallery String[]
  size String?
  maxOccupancy Int
  propertyStatus PropertyStatus @default(available)
  videoLink String?
  propertyTags String[]
  createdAt DateTime @default(now())
  ownerId String
  owner User @relation(fields:[ownerId],references:[id])
 reviews Review[]
 bookings Booking[]
 issues Issue[]
 safeties Safety[]
 monthlyRentPayments MonthlyRentPayment[]
 wishlists WishList[]
  insuranceId String? @unique
  insurance Insurance? @relation(fields: [insuranceId], references: [id])
  @@map("properties")
}


model Review {
  id String @id @default(uuid())
  comments String
  rating Int
  reviewDate DateTime @default(now())
  responseFromOwner String?
  reviewPic String[]
  propertyId String
  property Property @relation(fields:[propertyId], references:[id])
  renterId String
  renter User @relation(fields:[renterId],references:[id])
  
  @@map("reviews")
}


model Booking {
  id                String         @id @default(uuid())
  bookingStartDate  DateTime       @default(now())
  bookingEndDate    DateTime?
  bookingStatus     BookingStatus @default(Pending)
  specialRequest    String?
  renterId          String
  renter            User           @relation(fields: [renterId], references: [id])
  propertyId        String
  property          Property       @relation(fields: [propertyId], references: [id])
  payments          Payment[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  @@map("bookings")
}


model Payment{
  id String @id @default(uuid())
  paymentMethod String?
  paymentDate DateTime @default(now())
  paymentStatus PaymentStatus @default(Pending)
  securityDeposit Int
  paymentAmount Int
  bookingId String
  booking Booking @relation(fields:[bookingId],references:[id])
  renterId String
   renter User @relation(fields:[renterId],references:[id])
   @@map("payments")
}


model MonthlyRentPayment {
  id            String    @id @default(uuid())
  month         Int       
  year          Int
  status        PaymentStatus @default(Pending) 
  amount        Int?
  paymentDate   DateTime?  
  propertyId    String
  property      Property   @relation(fields: [propertyId], references: [id])
  renterId      String
  renter        User       @relation(fields: [renterId], references: [id])
  @@map("monthly_rent_payments")
}

model Issue {
  id String @id @default(uuid())
   title String?
  issueDescription String
  reportDate DateTime @default(now())
  issueStatus IssueStatus  @default(OPEN)
  priorityLevel PriorityLevel
  propertyId String
  property Property @relation(fields:[propertyId], references:[id])
    renterId String
  user User @relation(fields:[renterId], references:[id])
  @@map("issues")
}


model Safety{
  id String @id @default(uuid())
   title String?
  safetyAmenities String[]
  safetyScore Int
  propertyId String
  property Property @relation(fields:[propertyId],references:[id])
}


model Message {
  id String @id @default(uuid())
  content String
  timestamps DateTime
  category MessageCategory
  senderId String
  sender User @relation("MessageSent",fields:[senderId],references:[id])
   receiverId String
  receiver User @relation("MessageReceived",fields:[receiverId],references:[id])
  @@map("messages")
}

model Notification {
  id String @id @default(uuid())
  content String
  notificationType NotificationType
  timestamps DateTime
  notificationPlatform NotificationPlatform
  userId String
  user User @relation(fields:[userId],references:[id])
  @@map("notifications")
}


model WishList {
  id String @id @default(uuid())
  dateAdded DateTime @default(now())
   renterId String
  renter User @relation(fields:[renterId],references:[id])
   propertyId String
  property Property @relation(fields:[propertyId],references:[id])
  @@map("wishlists")
}


model Loyalty {
  id String @id @default(uuid())
  points Int
  redemptionHistory String[]
  userId String
  user User @relation(fields:[userId],references:[id])
  @@map("loyalties")
}

model LocalServices {
id String @id @default(uuid())
location String
serviceType String
description String
contactDetails String
operatingHours String?
@@map("localservices")
}

model Marketplace {
id String @id @default(uuid())
 title String?
itemDescription String
price Int
propertyImage String?
category Category @default(Apartment)
ownerId String
owner User @relation(fields: [ownerId], references: [id])
@@map("marketplaces")
}
model Insurance {
id String @id @default(uuid())
policyDetails String
coverageAmount Int
expiryDate DateTime
property      Property?
renterId String
renter User @relation(fields: [renterId], references: [id])
@@map("insurances")
}



model ContactUs {
  id String @id @default(uuid())
  name String
  email String
  subject String
  message String
  @@map("contact_us")
}

model Feedback {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  rating Int
  feedback String
  @@map("feedback")
}